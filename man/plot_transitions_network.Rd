% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggraph_transitions.R
\name{plot_transitions_network}
\alias{plot_transitions_network}
\title{Plot Employment Transitions Network}
\usage{
plot_transitions_network(
  transitions_data,
  input_format = "data.table",
  layout = "fr",
  node_size_var = "strength",
  edge_width_var = "weight",
  node_color_var = "community",
  min_edge_weight = 1,
  node_size_range = c(3, 15),
  edge_width_range = c(0.5, 3),
  edge_alpha = 0.6,
  node_alpha = 0.8,
  show_labels = TRUE,
  label_size = 3,
  label_repel = TRUE,
  palette = "viridis",
  use_bw = FALSE,
  directed = TRUE,
  show_edge_labels = FALSE,
  accessibility_mode = FALSE,
  title = NULL,
  subtitle = NULL
)
}
\arguments{
\item{transitions_data}{Data.table output from analyze_employment_transitions(), 
or a transition matrix when input_format = "matrix"}

\item{input_format}{Character. Format of input data: "data.table" or "matrix" (default: "data.table")}

\item{layout}{Character. Layout algorithm for network:
- "fr": Fruchterman-Reingold (default) - good for general networks
- "kk": Kamada-Kawai - preserves distances, good for smaller networks  
- "dh": Davidson-Harel - minimizes edge crossings
- "gem": GEM algorithm - fast spring layout
- "graphopt": Graphopt algorithm - good clustering
- "mds": Multidimensional scaling - preserves distance relationships
- "randomly": Random layout - for testing
- "circle": Circular layout - equal emphasis on all nodes
- "sphere": 3D sphere projection to 2D
- "grid": Grid-based layout}

\item{node_size_var}{Character. Variable to map to node size: "degree", "strength", 
"in_degree", "out_degree", "betweenness", "closeness", "fixed" (default: "strength")}

\item{edge_width_var}{Character. Variable to map to edge width: "weight", "transition_duration", 
"fixed" (default: "weight")}

\item{node_color_var}{Character. Variable to map to node color: "community", "degree", 
"fixed", "status" (default: "community")}

\item{min_edge_weight}{Numeric. Minimum edge weight to display (default: 1)}

\item{node_size_range}{Numeric vector of length 2. Size range for nodes (default: c(3, 15))}

\item{edge_width_range}{Numeric vector of length 2. Width range for edges (default: c(0.5, 3))}

\item{edge_alpha}{Numeric. Transparency for edges (default: 0.6)}

\item{node_alpha}{Numeric. Transparency for nodes (default: 0.8)}

\item{show_labels}{Logical. Show node labels (default: TRUE)}

\item{label_size}{Numeric. Size of node labels (default: 3)}

\item{label_repel}{Logical. Use repelling for labels to avoid overlap (default: TRUE)}

\item{palette}{Character. Color palette: "viridis", "okabe_ito", "employment", 
"main", "colorbrewer_set2" (default: "viridis")}

\item{use_bw}{Logical. Use black and white version (default: FALSE)}

\item{directed}{Logical. Treat graph as directed (default: TRUE)}

\item{show_edge_labels}{Logical. Show edge weight labels (default: FALSE)}

\item{accessibility_mode}{Logical. Enable high contrast accessibility mode (default: FALSE)}

\item{title}{Character. Plot title (default: auto-generated)}

\item{subtitle}{Character. Plot subtitle (default: auto-generated)}
}
\value{
A ggplot2 object showing the network visualization
}
\description{
Creates network visualizations of employment transitions using ggraph and tidygraph.
Supports multiple layout algorithms, accessibility features, and customization options.
Designed to work with output from analyze_employment_transitions().
}
\examples{
\dontrun{
library(data.table)
library(ggraph)
library(tidygraph)

# Create sample data
sample_data <- create_sample_employment_data(n_people = 50, n_periods = 4)
pipeline_result <- process_employment_pipeline(sample_data)
transitions <- analyze_employment_transitions(pipeline_result, transition_variable = "prior")

# Basic network plot
plot_transitions_network(transitions)

# Kamada-Kawai layout with degree-based node sizing
plot_transitions_network(transitions, layout = "kk", node_size_var = "degree")

# Accessibility mode with high contrast
plot_transitions_network(transitions, accessibility_mode = TRUE, use_bw = TRUE)

# Using transition matrix input
trans_matrix <- analyze_employment_transitions(pipeline_result, output_transition_matrix = TRUE)
plot_transitions_network(trans_matrix, input_format = "matrix")
}
}
