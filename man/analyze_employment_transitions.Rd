% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analyze_employment_transitions.R
\name{analyze_employment_transitions}
\alias{analyze_employment_transitions}
\title{Analyze Employment Transitions from Pipeline Output}
\usage{
analyze_employment_transitions(
  pipeline_result,
  transition_columns = NULL,
  min_unemployment_duration = 1,
  return_list = FALSE,
  show_progress = TRUE
)
}
\arguments{
\item{pipeline_result}{Output from process_employment_pipeline(). Must be a data.table
with columns: cf (person identifier), arco (employment overlap count), 
inizio/fine (period dates), and durata (period duration).}

\item{transition_columns}{Character vector of column names to analyze. If NULL (default),
uses the merged_columns attribute from pipeline_result.}

\item{min_unemployment_duration}{Minimum duration (in days) of unemployment period 
to consider a transition (default: 1).}

\item{return_list}{Logical. If TRUE, returns a list of data.tables (one per variable).
If FALSE (default), returns a single combined data.table with a 'variable' column.}

\item{show_progress}{Logical. If TRUE (default), displays a progress bar showing
the current processing step, percentage completion, and estimated time remaining.
Uses the 'progress' package if available, falls back to utils::txtProgressBar or
simple messages if not available.}
}
\value{
If return_list = FALSE, returns a data.table with columns:
  \itemize{
    \item{\code{variable}}: Name of the analyzed variable
    \item{\code{from}}: Value before transition
    \item{\code{to}}: Value after transition
    \item{\code{weight}}: Number of transitions
    \item{\code{transition_duration}}: Mean unemployment duration
    \item{\code{from_mean/from_mode}}: Duration-weighted aggregated "from" values (numeric/character)
    \item{\code{to_mean/to_mode}}: Duration-weighted aggregated "to" values (numeric/character)
  }
  If return_list = TRUE, returns a named list of data.tables, one for each variable.
}
\description{
Analyzes employment transitions from the output of process_employment_pipeline().
Identifies transitions between employment periods that are separated by unemployment
periods and provides transition pattern analysis for specified variables.
}
\details{
A transition occurs when there are consecutive employment periods (arco >= 1) 
separated by an unemployment period (arco = 0) of at least the minimum duration.
The function analyzes patterns in the "from" â†’ "to" transitions for specified columns.

For each column, the function provides:
\itemize{
  \item{\strong{from}}: Value in the employment period before unemployment
  \item{\strong{to}}: Value in the employment period after unemployment
  \item{\strong{weight}}: Number of transitions (.N)
  \item{\strong{transition_duration}}: Mean duration of intermediate unemployment periods
  \item{\strong{For numeric columns}}: from_mean, to_mean (duration-weighted mean values for that transition)
  \item{\strong{For character columns}}: from_mode, to_mode (mode values for that transition)
}
}
\examples{
\dontrun{
library(data.table)

# Create sample employment data with transitions
employment_data <- data.table(
  id = 1:6,
  cf = c("PERSON001", "PERSON001", "PERSON001", "PERSON002", "PERSON002", "PERSON002"),
  INIZIO = as.Date(c("2023-01-01", "2023-04-01", "2023-08-01", 
                     "2023-02-01", "2023-06-01", "2023-10-01")),
  FINE = as.Date(c("2023-02-28", "2023-05-31", "2023-12-31", 
                   "2023-04-30", "2023-08-31", "2023-12-31")),
  prior = c(1, 0, 1, 1, 1, 0),
  company = c("CompanyA", "CompanyB", "CompanyC", "CompanyD", "CompanyE", "CompanyF"),
  salary = c(50000, 25000, 60000, 55000, 65000, 30000)
)

# Process through pipeline
result <- process_employment_pipeline(
  original_data = employment_data,
  merge_columns = c("company", "salary")
)

# Analyze transitions with progress bar
transitions <- analyze_employment_transitions(result, show_progress = TRUE)
print(transitions)

# Analyze specific columns with minimum unemployment duration (no progress bar)
transitions_company <- analyze_employment_transitions(
  pipeline_result = result,
  transition_columns = "company",
  min_unemployment_duration = 7,
  return_list = TRUE,
  show_progress = FALSE
)
}
}
