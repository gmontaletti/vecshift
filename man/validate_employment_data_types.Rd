% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_quality.R
\name{validate_employment_data_types}
\alias{validate_employment_data_types}
\title{Validate Employment Data Types and Formats}
\usage{
validate_employment_data_types(
  dt,
  strict = FALSE,
  validate_over_id = TRUE,
  validate_duration = TRUE
)
}
\arguments{
\item{dt}{Data.table with standardized employment columns}

\item{strict}{Logical. If TRUE, throws errors for warnings}

\item{validate_over_id}{Logical. If TRUE, validates over_id column consistency}

\item{validate_duration}{Logical. If TRUE, validates duration calculation invariant}
}
\value{
Invisible validation results list
}
\description{
Performs comprehensive validation of employment data types, formats,
and basic logical consistency. Throws errors for critical issues
and warnings for potential problems. Includes validation for over_id
and duration calculation consistency.
}
\examples{
\dontrun{
library(data.table)
library(vecshift)

# Create correctly typed data
good_data <- data.table(
  id = 1:3,
  cf = c("P001", "P001", "P002"),
  inizio = as.Date(c("2023-01-01", "2023-04-01", "2023-02-01")),
  fine = as.Date(c("2023-03-31", "2023-06-30", "2023-05-31")),
  prior = c(1, 0, 1)
)

# Validate - should pass
validation_good <- validate_employment_data_types(good_data)
print(validation_good)

# Create data with type issues
bad_data <- data.table(
  id = 1:3,
  cf = c("P001", "P001", "P002"),
  inizio = c("2023-01-01", "2023-04-01", "2023-02-01"),  # Character, not Date!
  fine = as.Date(c("2023-03-31", "2023-06-30", "2023-05-31")),
  prior = c("1", "0", "1")  # Character, not numeric!
)

# Validate - should identify issues
validation_bad <- validate_employment_data_types(bad_data)
print(validation_bad)

# Check validation results
if (!validation_bad$is_valid) {
  cat("\nType errors detected:\n")
  print(validation_bad)
}
}
}
